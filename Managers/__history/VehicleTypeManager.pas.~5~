unit VehicleTypeManager;

interface

uses
  ManagerCRUD, FireDAC.Comp.Client, Data.DB, Vcl.Dialogs;

type
  TVehicleTypeManager = class(TManagerCRUD)
  public
    constructor Create(AQuery: TFDQuery);
    procedure LoadAll; override;
    procedure Delete(AID: integer; ShowMessage: Boolean);
    procedure Update(AID: integer; NewTypeName: String);
    procedure Add(typeName: String);

  private
  end;

implementation

procedure TVehicleTypeManager.Add(typeName: String);
begin
  FQuery.SQL.Text := 'INSERT INTO vehicle_type (type_name) VALUES (:typeName)';
  FQuery.ParamByName('typeName').AsString := typeName;
  FQuery.ExecSQL;

  LoadAll;
end;

constructor TVehicleTypeManager.Create(AQuery: TFDQuery);
begin
  inherited Create(AQuery);
end;

procedure TVehicleTypeManager.Delete(AID: integer; ShowMessage: Boolean);
begin
    begin
  if not ShowMessage or (MessageDlg('Подтвердить удаление', mtConfirmation,
  [mbOK, mbCancel], 0) = 1) then
  begin
  FQuery.SQL.Text := 'DELETE FROM vehicle_type WHERE id = :id';
  FQuery.ParamByName('id').AsInteger := AID;
  FQuery.ExecSQL;
  end;

  LoadAll;
end;








procedure TVehicleTypeManager.LoadAll;
begin
  FQuery.SQL.Text := 'select ' +
    'id as "Номер автомобиля", type_name as "Тип транспорта" ' +
    'from vehicle_type';
  FQuery.Open;
end;

procedure TVehicleTypeManager.Update(AID: Integer; NewTypeName: String);
begin
  FQuery.SQL.Text := 'UPDATE vehicle_type SET type_name = :NewTypeName WHERE id = :AID';
  FQuery.ParamByName('NewTypeName').AsString := NewTypeName;
  FQuery.ParamByName('AID').AsInteger := AID;
  FQuery.ExecSQL;

  LoadAll;
end;


end.
